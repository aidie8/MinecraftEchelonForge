buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        gradlePluginPortal()

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'

    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "6.0.0"
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'



group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}





println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            ideaModule "${project.name}.main"

            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
            mods {
                minecraftechelonforge {
                    sources sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"
            mods {
                minecraftechelonforge {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            //targeting DataGeneration
            environment 'target', 'fmluserdevdata'
            args '--mod', 'minecraftechelonforge', '--all', '--output', file('src/generated/resources/'),
                    '--existing', '"' + rootProject.file('src/main/resources') + '"'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'minecraftechelonforge', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                minecraftechelonforge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }



artifacts {
    archives tasks.shadowJar
}



repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    mavenLocal()
}

configurations {
    shade
    implementation.extendsFrom shade
}


dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
        // For more info:
        // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
        // http://www.gradle.org/docs/current/userguide/dependency_management.html
    shade group :'org.EchelonJavaSDK',name:"EchelonJavaSDK", version:'0.1.5' ,classifier:'slim'
    shade 'org.apache.httpcomponents:httpclient:4.5.14'
    shade 'commons-codec:commons-codec:1.16.0'
    shade 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.21'
    shade 'org.glassfish.tyrus:tyrus-client:1.21'





}



shadowJar {
    setArchiveClassifier("")
    configurations = [project.configurations.shade]
    mergeServiceFiles()
    finalizedBy 'reobfShadowJar'

    relocate "org.slf4j", "org.aidie8.relocated.slf4j"
    relocate "javax.websocket", "org.aidie8.relocated.javax.websocket"
    relocate "com.EchelonSDK", "org.aidie8.relocated.EchelonSDK"
}


reobf { shadowJar{}}

assemble.dependsOn shadowJar


//import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
//tasks.register('relocateShadowJar', ConfigureShadowRelocation) {
//    target = tasks.shadowJar
//   prefix = "${project.group}.shadowed"
//}
//tasks.shadowJar.dependsOn tasks.relocateShadowJar

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    tasks.named('processResources', ProcessResources).configure {
        var replaceProperties = [
                minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                forge_version       : forge_version, forge_version_range: forge_version_range,
                loader_version_range: loader_version_range,
                mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                mod_authors         : mod_authors, mod_description: mod_description,
        ]

        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
    }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        archiveClassifier = 'slim'
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])

    }


}
jar.finalizedBy('reobfJar')




    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    }




